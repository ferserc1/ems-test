const loadScript = () => {
    return new Promise((resolve) => {
        const script = document.createElement('script');
        script.type = "text/javascript";
        script.src = "fib.js";
        script.onload = script.onreadystatechange = function() {
            resolve();
        };
        document.head.appendChild(script);
    })
};


loadScript().then(() => {
    FibModule().then(instance => {
        console.log(`fib(12) = ${instance._fib(12)}`);
        instance._fib2();

        // Pasar un string desde JavaScript
        const message = "This string is passed from JS to C";
        const messagePtr = instance.allocate(instance.intArrayFromString(message), instance.ALLOC_NORMAL);
        instance._printString(messagePtr,1);
        instance._printString(messagePtr,2);
        instance._printString(messagePtr,3);
        instance._free(messagePtr); // Todo lo que hagamos con allocate hay que liberarlo después, cuando no se use
        
        // O también se puede pasar así
        instance.ccall('printString',null,['string','number'],[message, 5]);


        // Recoger un string en JavaScript desde C:
        // Es más sencillo con ccall(), porque ya le estamos diciendo al runtime que queremos obtener
        // un string. Pero aquí tenemos un memory leak (ver el código en C), ya que getString reserva
        // la cadena de texto en el heap y ese string ya no se va a borrar
        const stringFromC = instance.ccall('getString','string',[]);
        console.log(stringFromC);


        // Podemos obtener el string directamente del heap con HEAPU8, pero no sabemos el tamñao del string, así
        // que hay que recorrerlo byte a byte. Otra opción es recorrerlo en trozos, que será más rápido, y así
        // buscar el caracter de fin de cadena
        const strPtr = instance._getString();
        let done = false;
        let offset = 0;
        const chunkSize = 10;
        let stringFromC2 = "";
        while (!done) {
            const chunk = new Uint8Array(instance.HEAPU8.buffer, strPtr + offset, chunkSize);
            const text = new TextDecoder().decode(chunk);
            const endl = text.indexOf('\0');
            if (endl != -1) {
                done = true;
                stringFromC2 += text.substring(0,endl);
            }
            else {
                stringFromC2 += text;
            }
            offset += chunkSize;
        }
        console.log(stringFromC2);
        instance._free(strPtr); // Ahora ya podemos borrar el puntero
        

        const arrayResult = instance._getArrayTest(20,3.4);
        instance.cwrap;
        console.log(arrayResult);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwLXdhc20uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9qcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGxvYWRTY3JpcHQgPSAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XG4gICAgICAgIHNjcmlwdC5zcmMgPSBcImZpYi5qc1wiO1xuICAgICAgICBsZXQgbG9hZGVkID0gZmFsc2U7XG4gICAgICAgIHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9KVxufVxuXG5cbmxvYWRTY3JpcHQoKS50aGVuKCgpID0+IHtcbiAgICBGaWJNb2R1bGUoKS50aGVuKGluc3RhbmNlID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYGZpYigxMikgPSAke2luc3RhbmNlLl9maWIoMTIpfWApO1xuICAgICAgICBpbnN0YW5jZS5fZmliMigpO1xuXG4gICAgICAgIC8vIFBhc2FyIHVuIHN0cmluZyBkZXNkZSBKYXZhU2NyaXB0XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBcIlRoaXMgc3RyaW5nIGlzIHBhc3NlZCBmcm9tIEpTIHRvIENcIjtcbiAgICAgICAgY29uc3QgbWVzc2FnZVB0ciA9IGluc3RhbmNlLmFsbG9jYXRlKGluc3RhbmNlLmludEFycmF5RnJvbVN0cmluZyhtZXNzYWdlKSwgaW5zdGFuY2UuQUxMT0NfTk9STUFMKTtcbiAgICAgICAgaW5zdGFuY2UuX3ByaW50U3RyaW5nKG1lc3NhZ2VQdHIsMSk7XG4gICAgICAgIGluc3RhbmNlLl9wcmludFN0cmluZyhtZXNzYWdlUHRyLDIpO1xuICAgICAgICBpbnN0YW5jZS5fcHJpbnRTdHJpbmcobWVzc2FnZVB0ciwzKTtcbiAgICAgICAgaW5zdGFuY2UuX2ZyZWUobWVzc2FnZVB0cik7IC8vIFRvZG8gbG8gcXVlIGhhZ2Ftb3MgY29uIGFsbG9jYXRlIGhheSBxdWUgbGliZXJhcmxvIGRlc3B1w6lzLCBjdWFuZG8gbm8gc2UgdXNlXG4gICAgICAgIFxuICAgICAgICAvLyBPIHRhbWJpw6luIHNlIHB1ZWRlIHBhc2FyIGFzw61cbiAgICAgICAgaW5zdGFuY2UuY2NhbGwoJ3ByaW50U3RyaW5nJyxudWxsLFsnc3RyaW5nJywnbnVtYmVyJ10sW21lc3NhZ2UsIDVdKTtcblxuXG4gICAgICAgIC8vIFJlY29nZXIgdW4gc3RyaW5nIGVuIEphdmFTY3JpcHQgZGVzZGUgQzpcbiAgICAgICAgLy8gRXMgbcOhcyBzZW5jaWxsbyBjb24gY2NhbGwoKSwgcG9ycXVlIHlhIGxlIGVzdGFtb3MgZGljaWVuZG8gYWwgcnVudGltZSBxdWUgcXVlcmVtb3Mgb2J0ZW5lclxuICAgICAgICAvLyB1biBzdHJpbmcuIFBlcm8gYXF1w60gdGVuZW1vcyB1biBtZW1vcnkgbGVhayAodmVyIGVsIGPDs2RpZ28gZW4gQyksIHlhIHF1ZSBnZXRTdHJpbmcgcmVzZXJ2YVxuICAgICAgICAvLyBsYSBjYWRlbmEgZGUgdGV4dG8gZW4gZWwgaGVhcCB5IGVzZSBzdHJpbmcgeWEgbm8gc2UgdmEgYSBib3JyYXJcbiAgICAgICAgY29uc3Qgc3RyaW5nRnJvbUMgPSBpbnN0YW5jZS5jY2FsbCgnZ2V0U3RyaW5nJywnc3RyaW5nJyxbXSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0cmluZ0Zyb21DKTtcblxuXG4gICAgICAgIC8vIFBvZGVtb3Mgb2J0ZW5lciBlbCBzdHJpbmcgZGlyZWN0YW1lbnRlIGRlbCBoZWFwIGNvbiBIRUFQVTgsIHBlcm8gbm8gc2FiZW1vcyBlbCB0YW3DsWFvIGRlbCBzdHJpbmcsIGFzw61cbiAgICAgICAgLy8gcXVlIGhheSBxdWUgcmVjb3JyZXJsbyBieXRlIGEgYnl0ZS4gT3RyYSBvcGNpw7NuIGVzIHJlY29ycmVybG8gZW4gdHJvem9zLCBxdWUgc2Vyw6EgbcOhcyByw6FwaWRvLCB5IGFzw61cbiAgICAgICAgLy8gYnVzY2FyIGVsIGNhcmFjdGVyIGRlIGZpbiBkZSBjYWRlbmFcbiAgICAgICAgY29uc3Qgc3RyUHRyID0gaW5zdGFuY2UuX2dldFN0cmluZygpO1xuICAgICAgICBsZXQgZG9uZSA9IGZhbHNlO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgY29uc3QgY2h1bmtTaXplID0gMTA7XG4gICAgICAgIGxldCBzdHJpbmdGcm9tQzIgPSBcIlwiO1xuICAgICAgICB3aGlsZSAoIWRvbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoaW5zdGFuY2UuSEVBUFU4LmJ1ZmZlciwgc3RyUHRyICsgb2Zmc2V0LCBjaHVua1NpemUpO1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShjaHVuayk7XG4gICAgICAgICAgICBjb25zdCBlbmRsID0gdGV4dC5pbmRleE9mKCdcXDAnKTtcbiAgICAgICAgICAgIGlmIChlbmRsICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RyaW5nRnJvbUMyICs9IHRleHQuc3Vic3RyaW5nKDAsZW5kbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJpbmdGcm9tQzIgKz0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldCArPSBjaHVua1NpemU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coc3RyaW5nRnJvbUMyKVxuICAgICAgICBpbnN0YW5jZS5fZnJlZShzdHJQdHIpOyAvLyBBaG9yYSB5YSBwb2RlbW9zIGJvcnJhciBlbCBwdW50ZXJvXG4gICAgICAgIFxuXG4gICAgICAgIGNvbnN0IGFycmF5UmVzdWx0ID0gaW5zdGFuY2UuX2dldEFycmF5VGVzdCgyMCwzLjQpO1xuICAgICAgICBpbnN0YW5jZS5jd3JhcDtcbiAgICAgICAgY29uc29sZS5sb2coYXJyYXlSZXN1bHQpO1xuICAgIH0pO1xufSk7XG5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLFVBQVUsR0FBRyxNQUFNO0FBQ3pCLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sS0FBSztBQUNwQyxRQUFRLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDeEQsUUFBUSxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO0FBQ3hDLFFBQVEsTUFBTSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUM7QUFFOUIsUUFBUSxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxXQUFXO0FBRS9ELFlBQVksT0FBTyxFQUFFLENBQUM7QUFDdEIsVUFBUztBQUNULFFBQVEsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUMsS0FBSyxDQUFDO0FBQ04sRUFBQztBQUNEO0FBQ0E7QUFDQSxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTTtBQUN4QixJQUFJLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUk7QUFDakMsUUFBUSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsUUFBUSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDekI7QUFDQTtBQUNBLFFBQVEsTUFBTSxPQUFPLEdBQUcsb0NBQW9DLENBQUM7QUFDN0QsUUFBUSxNQUFNLFVB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
